stages:
  - check
  - build
  - test
  - release
  - deploy

variables:
  IMAGE_RELEASE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  IMAGE_TEST_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID-test
  CACHE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-cache
  CURVE_IMG_VER: $CI_COMMIT_SHORT_SHA

workflow:
  rules:
    # Rule for direct commit to production branch, MR is recommended
    - if: $CI_COMMIT_TAG
      variables:
        WORKFLOW_PRODUCTION: "true"
        IMAGE_RELEASE_TAG: $CI_REGISTRY_IMAGE/production:$CI_COMMIT_TAG
        IMAGE_TEST_TAG: $CI_REGISTRY_IMAGE/production:$CI_COMMIT_SHORT_SHA-$CI_COMMIT_TAG-test
        IMAGE_CACHE_TAG: $CI_REGISTRY_IMAGE/production:cache
        CURVE_IMG_VER: $CI_COMMIT_TAG
    - when: always
      variables:
        WORKFLOW_STAGING: "true"


        ## Common CI/CD targets used with extends keyword
.build_image_base:
  stage: build
  image: docker:20.10.6
  services:
    - docker:20.10.6-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
    CACHE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-cache
  before_script:
    - set -x
    - env
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    #  defaults: --build-arg REQUIREMENTS=requirements_prod.txt
    - 'eval docker pull $CACHE_TAG || true'
    - 'eval docker build --build-arg CURVE_IMG_VER=$CURVE_IMG_VER --cache-from $CACHE_TAG --tag $IMAGE_TAG --tag $CACHE_TAG .'
    - 'eval docker push $IMAGE_TAG'
    - 'eval docker push $CACHE_TAG'


.test_image_base:
  stage: test
  image: docker:20.10.6
  services:
    - docker:20.10.6-dind
  variables:
    POSTGRES_DB: curve
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
    REDIS_URL: "rediscache://redis:6379/1?client_class=django_redis.client.DefaultClient"
    SECRET_KEY: ads1234565asd
    ALLOWED_HOSTS: '127.0.0.1'
  before_script:
    - set -x
    - env
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - apk add docker-compose
  script:
    - 'eval docker pull $IMAGE_TEST_TAG'
    - 'eval export TEST_IMG=$IMAGE_TEST_TAG'
    - docker-compose -f docker-compose.yml -f docker-compose.test.override.yml run --rm --name application application
  artifacts:
    reports:
      cobertura: coverage.xml



#####
## workflow: Build image, deploy image
###
build-notest:
  extends: .build_image_base
  variables:
    IMAGE_TAG: $IMAGE_RELEASE_TAG
  rules:
    - if: $WORKFLOW_STAGING



####
## workflow: Build test image,Run unittest, release image, deploy image
##
build-test-image:
  extends: .build_image_base
  variables:
    IMAGE_TAG: $IMAGE_TEST_TAG
  rules:
    - if: $WORKFLOW_TEST

run-unittest:
  extends: .test_image_base
  rules:
    - if: $WORKFLOW_TEST


release_image:
  stage: release
  image: docker:20.10.6
  services:
    - docker:20.10.6-dind
  variables:
    GIT_STRATEGY: none
  before_script:
    - set -x
    - env
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - 'eval docker pull $IMAGE_TEST_TAG'
    - 'eval docker tag $IMAGE_TEST_TAG $IMAGE_RELEASE_TAG'
    - 'eval docker push $IMAGE_RELEASE_TAG'
  rules:
    - if: $WORKFLOW_TEST



####
## WORKFLOW_ALPHA: Build test image,Run unittest, release image
##


accept-valid-tag:
  image: alpine/semver
  stage: check
  script:
    - set -ex
    - env
    - semver $CI_COMMIT_TAG
  rules:
    - if: $WORKFLOW_PRODUCTION


build-production-test-image:
  extends: .build_image_base
  variables:
    IMAGE_TAG: $IMAGE_TEST_TAG
    CACHE_TAG: $IMAGE_CACHE_TAG
  rules:
    - if: $WORKFLOW_PRODUCTION

run-aplha-unittest:
  extends: .test_image_base
  rules:
    - if: $WORKFLOW_PRODUCTION


release-alpha-image:
  stage: release
  image: docker:20.10.6
  services:
    - docker:20.10.6-dind
  variables:
    GIT_STRATEGY: none
  before_script:
    - set -x
    - env
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - 'eval docker pull $IMAGE_TEST_TAG'
    - 'eval docker tag $IMAGE_TEST_TAG $IMAGE_RELEASE_TAG'
    - 'eval docker push $IMAGE_RELEASE_TAG'
  rules:
    - if: $WORKFLOW_PRODUCTION
